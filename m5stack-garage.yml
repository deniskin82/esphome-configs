substitutions:
  devicename: "m5stack-garage"
  friendly_devicename: "m5stack"

esphome:
  name: '${devicename}'
  friendly_name: '${friendly_devicename}'
  on_boot:
    priority: 800
    then:
      - switch.turn_off: garage_remote

esp32:
  board: m5stack-core-esp32
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key

ota:
  password: !secret ota_password

# Button to toggle the display backlight
# https://esphome.io/components/binary_sensor/index.html
binary_sensor:
    - platform: gpio
      id: M5_BtnA
      pin:
        number: 39
        inverted: True
      on_click:
        then:
          - display.page.show_previous: m5stack_display
          - component.update: m5stack_display
    - platform: gpio
      id: M5_BtnB
      pin:
        number: 38
        inverted: True
      on_click:
        then:
          - switch.toggle: backlight
    - platform: gpio
      id: M5_BtnC
      pin:
        number: 37
        inverted: True
      on_press:
        then:
          - switch.turn_on: garage_remote
          - component.update: m5stack_display
      on_release:
        then:
          - switch.turn_off: garage_remote
          - component.update: m5stack_display
    #   on_click:
    #     then:
    #       - switch.toggle: garage_remote
        # then:
        #   - display.page.show_next: m5stack_display
        #   - component.update: m5stack_display
    - platform: status
      id: connection_status

# Example configuration entry
switch:
  - platform: gpio
    pin: 5
    id: garage_remote
    inverted: true
    name: "Garage Button"
    restore_mode: RESTORE_INVERTED_DEFAULT_OFF
    icon: "mdi:garage-variant"
    on_turn_on:
      then:
        if:
          condition:
            binary_sensor.is_off: M5_BtnC
          then:
            - delay: 500ms
            - switch.turn_off: garage_remote
  - platform: gpio
    pin: 32
    name: "Backlight"
    id: backlight
    restore_mode: ALWAYS_ON

# https://esphome.io/components/time.html
time:
  - platform: homeassistant
    id: homeassistant_time
  - platform: sntp
    id: sntp_time

wifi:
  id: wifi_id
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${devicename}"
    password: !secret wifi_ap_password

captive_portal:
    
web_server:
  port: 80

sensor:
  # - platform: wifi_signal
  #   name: ${friendly_devicename} WiFi Signal
  #   id: wifi_dbm
  - platform: uptime
    name: ${friendly_devicename} Uptime

spi:
  clk_pin: 18
  mosi_pin: 23
  miso_pin: 19

font:
  # gfonts://family[@weight]
  # - file: "gfonts://Roboto"
  #   id: g_roboto
  #   size: 20
  - file: "gfonts://Tourney"
    id: g_mono
    size: 20

button:
  - platform: shutdown
    name: "${devicename} Shutdown"

display:
  - platform: ili9xxx
    id: m5stack_display
    model: M5Stack
    cs_pin: 14
    dc_pin: 27
    reset_pin: 33
    rotation: 0
    pages:
      - id: page1
        lambda: |-
          it.strftime(0, 0, id(g_mono), "%a- %I:%M %p", id(sntp_time).now());
          if (id(wifi_id).is_connected()) {
            it.print(0,20, id(g_mono), "WiFi: Connected");
          } else {
            it.print(0,20, id(g_mono), "WiFi: NOT Connected");
          }
      - id: page2
        lambda: |-
          it.printf(0, 0, id(g_mono), "Garage Remote: %s", id(garage_remote).state ? "ON" : "OFF");

interval:
  - interval: 5s
    then:
      - display.page.show_next: m5stack_display
      - component.update: m5stack_display
